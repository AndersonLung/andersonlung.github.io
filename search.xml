<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>内存管管理 —— slab分配器</title>
    <url>/2021/10/07/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E2%80%94%E2%80%94-slab%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h3 id="为什么需要slab分配器"><a href="#为什么需要slab分配器" class="headerlink" title="为什么需要slab分配器"></a>为什么需要slab分配器</h3><p>   应用程序申请内存是随意的，不会完全按照2的幂次来申请，因此造成的内存浪费无可避免，使用slab分配器来改善这种现象。slab分配器预先从内存中分配一定数量的内存区块，模块申请内存直接从slab预申请的内存中获取</p>
<h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul>
<li>子系统频繁申请和释放内存时，slab分配才能发挥作用</li>
<li>利用slab申请的内存大小是固定的，只有固定的内存才能实现内存的高速申请和释放<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3>slab分配器有三种状态</li>
<li>满 slab的所有对象被标记 <em>已使用</em></li>
<li>部分使用 slab的部分对象被标记 已使用 部分标记为空闲</li>
<li>空 slab的所有对象标记为未使用<br>这里的对象指的是slab申请缓存的数据结构，如果有空闲的对象，先使用空闲的对象，没有申请新的slab<img src="https://img-blog.csdn.net/20140514202314640" width="75%" height="75%">
#### slab 描述符
slab描述符是一个数据结构。主要存放在两个地方</li>
<li>外部slab描述符（外置式）：存放在slab外部，位于cache_size指向的一个普通高速缓存中。</li>
<li>内部slab描述符（内置式）：存放在slab的内部，位于分配给slab的内存的第一个页框的起始位置。<h4 id="slab-对象描述符"><a href="#slab-对象描述符" class="headerlink" title="slab 对象描述符"></a>slab 对象描述符</h4></li>
</ul>
<h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><pre><code>可以避免外部碎片，也就是反复申请释放内存，不会对实际内存的使用造成波动，只是将释放的内存会重新返回到slab维护的链表供下次申请使用
</code></pre>
<hr>
<p> 参考文献：<br> <a href="https://kernel.blog.csdn.net/article/details/52705552?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4.no_search_link">slab分配器–Linux内存管理(二十二)</a><br> <a href="https://blog.csdn.net/wenqian1991/article/details/25652147">内存管理 slab分配器</a></p>
]]></content>
      <categories>
        <category>Linux 内核</category>
        <category>内存管理</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
        <tag>slab</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理 —— 伙伴算法</title>
    <url>/2021/10/07/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E2%80%94%E2%80%94-%E4%BC%99%E4%BC%B4%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="为什么需要伙伴算法"><a href="#为什么需要伙伴算法" class="headerlink" title="为什么需要伙伴算法"></a>为什么需要伙伴算法</h2><p>   本质上是减少内存的碎片化</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>伙伴算法把内存的页框分为11组链表，分别是2的0次幂到10次幂。可以在 <strong>&lt;mmzone.h&gt;</strong> 文件中查看相关定义</li>
<li>不同大小的内存区块是不会再同一个链表<br>如图显示 按照伙伴算法将1M内存划分成<img src="https://img-blog.csdn.net/20140614202745343" width="75%" height="75%"></li>
</ul>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>   查找时候，先确定需要的内存大小的最小区块</p>
<ul>
<li>如果在区块链表找到 则分配给应用程序</li>
<li>如果没有找到则向上获取，裂开，一部分分给应用程序，另一部分给下一级的链表作为空闲区块 <h3 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h3>释放，操作系统将会内存收回，附近如果有同样带下未使用的区块，则合并<br>无论释放或者申请，算法都会检查当前链表是否空闲<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li>
<li>解决外部碎片</li>
<li>针对大内存分配<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li>
<li>合并要求过于严苛</li>
<li>申请内存大小造成浪费 </li>
</ul>
<hr>
<p> 参考文献：<br> <a href="https://blog.csdn.net/gatieme/article/details/52420444">伙伴算法</a><br> <a href="https://blog.csdn.net/u013009575/article/details/17751147">伙伴算法</a></p>
]]></content>
      <categories>
        <category>Linux 内核</category>
        <category>内存管理</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
        <tag>伙伴算法</tag>
      </tags>
  </entry>
</search>
