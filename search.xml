<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>内存管管理 —— slab分配器</title>
    <url>/2021/10/07/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E2%80%94%E2%80%94-slab%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h3 id="为什么需要slab分配器"><a href="#为什么需要slab分配器" class="headerlink" title="为什么需要slab分配器"></a>为什么需要slab分配器</h3><p>   应用程序申请内存是随意的，不会完全按照2的幂次来申请，因此造成的内存浪费无可避免，使用slab分配器来改善这种现象。slab分配器预先从内存中分配一定数量的内存区块，模块申请内存直接从slab预申请的内存中获取</p>
<h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul>
<li>子系统频繁申请和释放内存时，slab分配才能发挥作用</li>
<li>利用slab申请的内存大小是固定的，只有固定的内存才能实现内存的高速申请和释放<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3>slab分配器有三种状态</li>
<li>满 slab的所有对象被标记 <em>已使用</em></li>
<li>部分使用 slab的部分对象被标记 已使用 部分标记为空闲</li>
<li>空 slab的所有对象标记为未使用<br>这里的对象指的是slab申请缓存的数据结构，如果有空闲的对象，先使用空闲的对象，没有申请新的slab<img src="https://img-blog.csdn.net/20140514202314640" width="75%" height="75%"></li>
</ul>
<h4 id="slab描述符"><a href="#slab描述符" class="headerlink" title="slab描述符"></a>slab描述符</h4><p>   slab描述符是一个数据结构。主要存放在两个地方</p>
<ul>
<li>外部slab描述符（外置式）：存放在slab外部，位于cache_size指向的一个普通高速缓存中。</li>
<li>内部slab描述符（内置式）：存放在slab的内部，位于分配给slab的内存的第一个页框的起始位置。</li>
</ul>
<h4 id="slab对象描述符"><a href="#slab对象描述符" class="headerlink" title="slab对象描述符"></a>slab对象描述符</h4><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><pre><code>可以避免外部碎片，也就是反复申请释放内存，不会对实际内存的使用造成波动，只是将释放的内存会重新返回到slab维护的链表供下次申请使用
</code></pre>
<hr>
<p> 参考文献：<br> <a href="https://kernel.blog.csdn.net/article/details/52705552?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4.no_search_link">slab分配器–Linux内存管理(二十二)</a><br> <a href="https://blog.csdn.net/wenqian1991/article/details/25652147">内存管理 slab分配器</a></p>
]]></content>
      <categories>
        <category>Linux 内核</category>
        <category>内存管理</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
        <tag>slab</tag>
      </tags>
  </entry>
  <entry>
    <title>内存管理 —— 伙伴算法</title>
    <url>/2021/10/07/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E2%80%94%E2%80%94-%E4%BC%99%E4%BC%B4%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="为什么需要伙伴算法"><a href="#为什么需要伙伴算法" class="headerlink" title="为什么需要伙伴算法"></a>为什么需要伙伴算法</h2><p>   本质上是减少内存的碎片化</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>伙伴算法把内存的页框分为11组链表，分别是2的0次幂到10次幂。可以在 <strong>&lt;mmzone.h&gt;</strong> 文件中查看相关定义</li>
<li>不同大小的内存区块是不会再同一个链表<br>如图显示 按照伙伴算法将1M内存划分成<img src="https://img-blog.csdn.net/20140614202745343" width="75%" height="75%"></li>
</ul>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>   查找时候，先确定需要的内存大小的最小区块</p>
<ul>
<li>如果在区块链表找到 则分配给应用程序</li>
<li>如果没有找到则向上获取，裂开，一部分分给应用程序，另一部分给下一级的链表作为空闲区块 <h3 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h3>释放，操作系统将会内存收回，附近如果有同样大小未使用的区块，则合并<br>无论释放或者申请，算法都会检查当前链表是否空闲<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3></li>
<li>解决外部碎片</li>
<li>针对大内存分配<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3></li>
<li>合并要求过于严苛</li>
<li>申请内存大小造成浪费 </li>
</ul>
<hr>
<p> 参考文献：<br> <a href="https://blog.csdn.net/gatieme/article/details/52420444">伙伴算法</a><br> <a href="https://blog.csdn.net/u013009575/article/details/17751147">伙伴算法</a></p>
]]></content>
      <categories>
        <category>Linux 内核</category>
        <category>内存管理</category>
      </categories>
      <tags>
        <tag>内存管理</tag>
        <tag>伙伴算法</tag>
      </tags>
  </entry>
  <entry>
    <title>虚函数</title>
    <url>/2021/10/07/%E8%99%9A%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h3 id="虚指针如何找到虚函数，确定这是哪一个虚函数"><a href="#虚指针如何找到虚函数，确定这是哪一个虚函数" class="headerlink" title="虚指针如何找到虚函数，确定这是哪一个虚函数"></a>虚指针如何找到虚函数，确定这是哪一个虚函数</h3><p> 虚函数表的存放的是虚函数的物理地址<br>虚函数表中的内容是在编译的时候确定的，通过以下方式进行查找<code>(* p-&gt;vptr[n] )(p)</code> 或者 <code>(* (p-&gt;vptr)[n] )(p)</code>，它的解读是：通过类对象指针p找到虚指针vptr，再查找到虚函数表中的第n个内容，并将他作为函数指针进行调用，调用时的入参是p(式子中的第二个p)，而这个p就是隐藏的this指针，这里的n也是在编译的时候确定的</p>
<hr>
<p> 参考文献：<br> <a href="https://zhuanlan.zhihu.com/p/98776075">知乎-虚函数解析</a><br> <a href="https://leehao.me/C-%E8%99%9A%E5%87%BD%E6%95%B0%E8%A1%A8%E5%89%96%E6%9E%90/">C++虚函数表剖析</a></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>虚函数</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>进程管理和进程调度</title>
    <url>/2021/10/09/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%92%8C%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><p>  进程的目的是为了分配资源，内核将应用任务存放在双向链表任务列表中。链表的item 是task_struct(进程描述符)。进程描述符比较大，在32位的机器，该数据结构表示 打开的文件、进程的地址空间，进程的状态、挂起的信号和其他信息</p>
<h3 id="分配进程描述符"><a href="#分配进程描述符" class="headerlink" title="分配进程描述符"></a>分配进程描述符</h3><p>  Linux 通过slab分配器分配task_truct 结构，达到复用角色和和缓存着色的目的。当程序需要一个结构实例时，只需要从空闲链表中获取一个空闲的，然后将数据存放占用该区块的内存空间。使用完后释放内存，将链表结构放回到空闲链表。使用slab分配器动态生成task_struct 结构，只需要在栈底(向上增长)或 栈顶(向上增长)的位置创建一个新的结构 struct_thread_info</p>
<h3 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h3><p>  内核通过唯一的标识符PID来标识每个进程，是pid_t类型，也就是int类型，PID的最大值是32768，内存会把PID存入各自进程的进程描述符的结构中<br>  进程在新的内存地址空间创建新进程，读入可执行程序，读入可执行程序可以分解成fork和exec两个函数，在内核中都用相对应的进程函数来完成该功能。fork通过拷贝当前进程来创建一个进程</p>
<h3 id="写时拷贝"><a href="#写时拷贝" class="headerlink" title="写时拷贝"></a>写时拷贝</h3><p>  内核通过写时拷贝页来实现将资源复制给新线程，只有在需要写入时候，才能将相应的资源复制给新线程。推迟拷贝的动作发生时间。</p>
<hr>
<p> 参考文献：<br> <a href="">Linux内核设计与实现(第三版)</a></p>
]]></content>
      <categories>
        <category>进程管理</category>
      </categories>
      <tags>
        <tag>进程管理</tag>
        <tag>进程调度</tag>
      </tags>
  </entry>
  <entry>
    <title>qt 跨平台生成dump文件</title>
    <url>/2021/10/20/qt-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%94%9F%E6%88%90dump%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h3 id="dump文件重要性"><a href="#dump文件重要性" class="headerlink" title="dump文件重要性"></a>dump文件重要性</h3><h3 id="WIN-的DUMP-文件生成"><a href="#WIN-的DUMP-文件生成" class="headerlink" title="WIN 的DUMP 文件生成"></a>WIN 的DUMP 文件生成</h3><h3 id="Linux-的DUMP-文件生成"><a href="#Linux-的DUMP-文件生成" class="headerlink" title="Linux 的DUMP 文件生成"></a>Linux 的DUMP 文件生成</h3><h4 id="Breakpad"><a href="#Breakpad" class="headerlink" title="Breakpad"></a>Breakpad</h4><p> Breakpad是google 提供的一个开源跨平台奔溃处理框架，内含转储、上报、分析<br> 官方文档介绍：<a href="http://code.google.com/p/google-breakpad/wiki/GettingStartedWithBreakpad">http://code.google.com/p/google-breakpad/wiki/GettingStartedWithBreakpad</a><br> <img src="https://img-blog.csdnimg.cn/20210402142301295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ1OTcxOTg=,size_16,color_FFFFFF,t_70" width="75%" height="75%"></p>
]]></content>
      <categories>
        <category>QT</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>DUMP</tag>
        <tag>Breakpad</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础</title>
    <url>/2021/10/25/C-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>本界面主要记录C++ 的一些基础知识和实操</p>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>  构造函数分为默认无参构造，有参构造 拷贝构造 移动构造<br>  以Student为例<br>  默认无参为： <code>Student();</code><br>  一般构造为 ： <code>Student(const String &amp;name);</code><br>  一般构造函数带默认参数 ： <code>Student(const String &amp;name,const nation = &quot;zh&quot;);</code><br>  拷贝构造：<code>Student(const Student &amp;xiaoming)</code>  拷贝构造为深拷贝<br>  移动构造：<code>Student(const Student &amp;xiaoming)</code> 移动构造为浅拷贝，提供指针移动和赋值的机制</p>
<h4 id="explicit-关键字"><a href="#explicit-关键字" class="headerlink" title="explicit 关键字"></a>explicit 关键字</h4><p>  主要作用是阻止系统采用默认构造，不允许构造函数的隐式转换</p>
<h3 id="析构"><a href="#析构" class="headerlink" title="析构"></a>析构</h3><p>  析构主要处理额外释放一些资源</p>
<h3 id="c-内存布局"><a href="#c-内存布局" class="headerlink" title="c++ 内存布局"></a>c++ 内存布局</h3><p>  c++ 内存布局主要分为  堆、栈、自由存储区、全局/静态区、常量存储区<br>  堆：由用户控制，使用malloc的申请的分配内存空间，操作系统维护的特殊内存空间<br>  栈：由系统控制，申请必要的局部内存单元，处理器的指令集<br>  自由存储区：用于new 申请的内存分配空间<br>  全局/静态区：程序编译时产生的变量，在程序生命周期都存在的变量<br>  常量存储区：特殊存储区，存储常量，不允许更改</p>
<h3 id="关键字-static-const"><a href="#关键字-static-const" class="headerlink" title="关键字 static  const"></a>关键字 static  const</h3><p>  const 表示对象和变量是常量，初始化必须赋值，不能修改值<br>  const 变量是文件的局部变量，其他文件访问必须指定为extern<br>  在《Effective C++》中条款2和条款3 使用const 代替#define 主要原因是指定类型和尽量使用const<br>  static 表示作用范围是改函数体 ，不同于其他的变量，static 在内存中只有一份，不需要多次分配。但是仍然具有文件使用区域的限制</p>
<h4 id="C-里的静态成员函数不能用const、volatile的原因"><a href="#C-里的静态成员函数不能用const、volatile的原因" class="headerlink" title="C++里的静态成员函数不能用const、volatile的原因"></a>C++里的静态成员函数不能用const、volatile的原因</h4><p>  static成员不是任何对象的组成部分，所以static成员函数不能被声明为const，毕竟，将成员函数声明为const就是承诺不会修改该函数所属的对象。最后，static成员函数也<br>不能被声明为虚函数。</p>
<h3 id="C-面向对象的三大特性"><a href="#C-面向对象的三大特性" class="headerlink" title="C++ 面向对象的三大特性"></a>C++ 面向对象的三大特性</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><table>
<thead>
<tr>
<th>继承方式</th>
<th>public</th>
<th>protected</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>public</td>
<td>protected</td>
<td>private</td>
</tr>
<tr>
<td>protected</td>
<td>protected</td>
<td>protected</td>
<td>private</td>
</tr>
<tr>
<td>private</td>
<td>不可见</td>
<td>不可见</td>
<td>不可见</td>
</tr>
</tbody></table>
<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>主要体现在使用类和对象来进行数据封装</p>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>静态多态：编译期确定，使用函数重载来实现<br>动态多态：运行时确定，使用虚函数来实现</p>
<h4 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h4><p>  virtual 声明该函数，告诉编译器不要静态链接到该函数<br>纯虚函数：声明为纯虚函数，它的实现留给该基类的派生类去做。纯虚函数在声明虚函数时被“初始化”为0的函数。在成员函数的形参后面写上=0，包含纯虚函数的类叫做抽象类（也叫接口类），抽象类不能实例化出对象。纯虚函数在派生类中重新定义以后，派生类才能实例化出对象<br>虚函数与构造函数（构造函数为什么一般不定义为虚函数）</p>
<h5 id="虚函数和构造函数"><a href="#虚函数和构造函数" class="headerlink" title="虚函数和构造函数"></a>虚函数和构造函数</h5><p>若构造函数声明为虚函数，那么由于对象还未创建，还没有内存空间，更没有虚函数表地址用来调用虚函数来构造函数了<br>虚函数可以调用在派生类中的函数，如果构造函数定义为虚函数，那么构造函数可能操作没有被初始化的成员，导致出错。（虚函数只需要”部分“信息就可以自动调用，特别地，这种机制允许我们在只知道接口，不知道具体对象的类型的情况下调用函数。而实例化一个对象需要完整的信息，特别地，必须知道实例化对象的确切类型。）<br>如果构造函数使用虚机制，他将只产生通过它自己的V-Table的调用，而不是最后派生的VTABLE。</p>
<h5 id="虚函数和析构函数"><a href="#虚函数和析构函数" class="headerlink" title="虚函数和析构函数"></a>虚函数和析构函数</h5><p>虚函数与析构函数（析构函数为什么一般定义为虚函数）<br>对象已经被构造，它的*__vptr已经被初始化了，所以可以发生虚函数调用。<br>析构函数不设为虚函数，可能只调用基类的析构函数，而没有调用派生类的析构函数，容易造成内存泄露。<br>虚析构函数是为了让通过基类指针或引用可以正确释放派生类对象。有时候如果想让基类成为一个抽象类，也就是不能被实例化，可以为类引入一个纯虚函数。但如果手上没有任何pure virtual函数时，该怎么办？由于抽象类总是会被作为基类用于派生的，而基类就该有一个虚的析构函数，并且由纯虚函数可以导致抽象类。所以常常把基类的析构函数声明为纯虚析构函数。又由于所有对象析构时，最后都会调用其基类的析构函数，所以基类的析构函数必须有定义。纯虚析构函数也不例外。</p>
<h5 id="虚指针如何找到虚函数的项"><a href="#虚指针如何找到虚函数的项" class="headerlink" title="虚指针如何找到虚函数的项"></a>虚指针如何找到虚函数的项</h5><p>虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的编译阶段，虚表就可以构造出来了。</p>
<h2 id="C-y语言相关"><a href="#C-y语言相关" class="headerlink" title="C y语言相关"></a>C y语言相关</h2><h4 id="C-语言如何访问另一个文件的全局变量"><a href="#C-语言如何访问另一个文件的全局变量" class="headerlink" title="C 语言如何访问另一个文件的全局变量"></a>C 语言如何访问另一个文件的全局变量</h4><p>使用extern  extern可以置于变量或者函数前，以标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义</p>
<h2 id="数据结构相关"><a href="#数据结构相关" class="headerlink" title="数据结构相关"></a>数据结构相关</h2><h4 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h4><p>数组 能二分查找前提是 有序<br>链表不能直接二分查找  因为链表查词不能再O(1)时间内获得，还不如链表直接查找</p>
<h3 id="数据结构-复杂度"><a href="#数据结构-复杂度" class="headerlink" title="数据结构 复杂度"></a>数据结构 复杂度</h3><ul>
<li>红黑树  O(lgn)</li>
<li>链表   查询和插入  O(n)</li>
<li>数组    查询和插入 O(1)</li>
</ul>
<h2 id="Linux-相关"><a href="#Linux-相关" class="headerlink" title="Linux 相关"></a>Linux 相关</h2><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>top<br>ps -aux</p>
<h3 id="查看使用共享库"><a href="#查看使用共享库" class="headerlink" title="查看使用共享库"></a>查看使用共享库</h3><p>ipcs -m</p>
<h3 id="调试相关"><a href="#调试相关" class="headerlink" title="调试相关"></a>调试相关</h3><p>gdb  用于调试处理<br>b 设置断点行数</p>
<ul>
<li>break <function>    在进入指定函数时停住</li>
<li>break <linenum>    在指定行号停住。</li>
<li>break +/-offset    在当前行号的前面或后面的offset行停住。offiset为自然数。</li>
<li>break filename:linenum    在源文件filename的linenum行处停住。</li>
<li>break … if <condition>    …可以是上述的参数，condition表示条件，在条件成立时停住。比如在循环境体中，可以设置break if i=100，表示当i为100时停住程序。+</li>
</ul>
<h2 id="QT-相关"><a href="#QT-相关" class="headerlink" title="QT 相关"></a>QT 相关</h2><h4 id="Qobject-的作用"><a href="#Qobject-的作用" class="headerlink" title="Qobject 的作用"></a>Qobject 的作用</h4><p>MOC 元对象系统，引入qobject 可以使用元对象系统的特性，比如信号和槽函数</p>
<h4 id="信号和槽函数-虚函数"><a href="#信号和槽函数-虚函数" class="headerlink" title="信号和槽函数  虚函数"></a>信号和槽函数  虚函数</h4><p>槽函数 可以是虚函数，是因为在构造函数调用connect 函数时，如果是子类，实际上connect 的是父类的对象的槽函数，此时基类指针指向子类对象，如果是构造中使用connect 来处理，需要再构造中将基类的槽函数设置为虚函数</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/2021/10/26/%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><p>富文本传输协议<br>影响HTTP的网络请求的是带宽和延迟</p>
<h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h3><p>特点：短连接，即用即连</p>
<h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h3><p>特点：长链接<br>默认模式使用带流水线的长连接<br>在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟<br>HTTP 1.1通过增加更多的请求头和响应头来改进和扩充HTTP 1.0的功能<br>错误状态管理：HTTP/1.1新增了24个错误状态响应码<br>范围请求：HTTP/1.1在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content）<br>Host: 请求发往同一台服务器上的不同网站<br>持久连接：在HTTP/1.1中默认开启 Connection: keep-alive，即TCP连接默认不关闭，可以被多个请求复用。<br>管道机制：HTTP/1.1中引入了管道机制（pipelining）,即在同一个TCP连接中，客户端可以同时发送多个请求</p>
<h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h3><p>特点： 服务器可以向客户端推送消息<br>服务器推送消息：服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了，主动推送可以实现类似MQTT之类的观察者模式<br>多路复用：多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率<br>请求优先级：解决多路复用导致的关键请求被阻塞<br>header压缩：HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量<br>基于HTTPS的加密协议传输：提高了传输数据的可靠性</p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>通信协议</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT和WEBSOCKET 协议</title>
    <url>/2021/10/26/MQTT%E5%92%8CWEBSOCKET-%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="MQTT-协议"><a href="#MQTT-协议" class="headerlink" title="MQTT 协议"></a>MQTT 协议</h2><p>mqtt协议主要用于物联网<br>提供topic 供服务端和客户端来订阅和发布<br>主要优点</p>
<ul>
<li>实现简单</li>
<li>提供数据传输的 QoS</li>
<li>轻量、占用带宽低</li>
<li>可传输任意类型的数据</li>
<li>可保持的会话（session）<img src="https://pic4.zhimg.com/80/v2-df0a41bab88efe5bf981b4e99e503337_720w.jpg" width="75%" height="75%"></li>
</ul>
<p>服务质量：qos</p>
<ul>
<li>0 最多一次</li>
<li>1 至少一次</li>
<li>2 仅一次</li>
</ul>
<h2 id="WEBSOCKET-协议"><a href="#WEBSOCKET-协议" class="headerlink" title="WEBSOCKET 协议"></a>WEBSOCKET 协议</h2><p>websocket 全双工通信，双向可以相互推送，用来消息通信</p>
]]></content>
      <categories>
        <category>通信协议</category>
      </categories>
      <tags>
        <tag>通信协议</tag>
        <tag>MQTT</tag>
        <tag>WEBSOCKET</tag>
      </tags>
  </entry>
</search>
